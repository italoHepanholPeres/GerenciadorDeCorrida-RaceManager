package view;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.format.DateTimeParseException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import model.Race;
import model.Runner;
import util.DateValidator;

public class RegisterRunner extends JFrame {
	
	private static final long serialVersionUID = 1L;
	private JTable table;
	private DefaultTableModel model;

	public RegisterRunner(Race race) {
		this.setTitle("Cadastrar Corredor");
		this.setSize(600, 400);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(false);

		Container c = this.getContentPane();
		c.setLayout(new BorderLayout());

		JPanel inputPanel = new JPanel();
		inputPanel.setLayout(new GridLayout(7, 2, 2, 2));

		JLabel name = new JLabel("Informe o nome do corredor:");
		JTextField nameInput = new JTextField(20);
		inputPanel.add(name);
		inputPanel.add(nameInput);

		JLabel birthDate = new JLabel("Informe a data de nascimento do corredor:");
		JTextField birthDateInput = new JTextField(20);
		inputPanel.add(birthDate);
		inputPanel.add(birthDateInput);

		JLabel gender = new JLabel("Informe o genero do corredor:");
		JTextField genderInput = new JTextField(20);
		inputPanel.add(gender);
		inputPanel.add(genderInput);

		JLabel phone = new JLabel("Informe o telefone do corredor:");
		JTextField phoneInput = new JTextField(20);
		inputPanel.add(phone);
		inputPanel.add(phoneInput);

		JButton addBttn = new JButton("Adicionar corredor");
		inputPanel.add(addBttn);
		
		JLabel remove = new JLabel("Informe um id para remover o corredor");
		JTextField idToRemove = new JTextField(10);
		JButton removeBttn = new JButton("Remover jogador");
		inputPanel.add(remove);
		inputPanel.add(removeBttn);
		inputPanel.add(idToRemove);
		
		addBttn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				String name = nameInput.getText().trim();
			    String birthDate = birthDateInput.getText().trim();
			    String gender = genderInput.getText().trim();
			    String phone = phoneInput.getText().trim();

			    if (name.isEmpty() || birthDate.isEmpty() || gender.isEmpty() || phone.isEmpty()) {
			        JOptionPane.showMessageDialog(null, "Todos os campos devem ser preenchidos!", "Erro", JOptionPane.ERROR_MESSAGE);
			        return;
			    }

			    if (!phone.matches("\\d{8,11}")) { 
			        JOptionPane.showMessageDialog(null, "O telefone deve conter apenas números (8 a 11 dígitos)!", "Erro", JOptionPane.ERROR_MESSAGE);
			        return;
			    }		
			    
			    if(!DateValidator.validateBirthDate(birthDate, Runner.getFORMAT())) {
			    	JOptionPane.showMessageDialog(null, "A data já tem que ter passado ou/e a data tem estar no formato dd/MM/yyyy HH:mm e tem que ser uma data válida");
			    	return;
			    }
			    
				try {
					Runner runner = 
							race.addRunner(
							name,
							birthDate,
							gender, 
							phone);
					
					model.addRow(new Object[] { runner.getId(),
							name,
							birthDate,
							gender, 
							phone });
					nameInput.setText("");
					birthDateInput.setText("");
					genderInput.setText("");
					phoneInput.setText("");

					
				} catch (DateTimeParseException ex) {
					 JOptionPane.showMessageDialog(null, "Formato inválido! Use o formato dd/MM/yyyy (ex: 25/12/2000)", "Erro", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		
		removeBttn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					int passedId = Integer.parseInt(idToRemove.getText().trim());
					
					race.removeRunner(passedId);
					
					model.removeRow(passedId-1);
				}catch (NumberFormatException ex2) {
					JOptionPane.showMessageDialog(null, "Impossível converter para número", "Erro", JOptionPane.ERROR_MESSAGE);
				}catch (ArrayIndexOutOfBoundsException e2) {
					JOptionPane.showMessageDialog(null, "O id de corredor não encontrado ou fora da lista", "Erro", JOptionPane.ERROR_MESSAGE);
				}
			}
		});

		JPanel outputPanel = new JPanel();
		outputPanel.setLayout(new BorderLayout());
		
		model = new DefaultTableModel(new Object[] { "ID",
		        "Nome",
		        "Data de Nascimento",
		        "Genero",
		        "Telefone" }, 0) {
					//ele pede isso para tirar warning(linha amarela)
					private static final long serialVersionUID = 1L;
			//impede editar a lista
			@Override
		    public boolean isCellEditable(int row, int column) {
		        return false;
		    }
			
			
		};	
		table = new JTable(model);
		//impede de aumentar ou mover colunas
		table.getTableHeader().setReorderingAllowed(false);
		table.getTableHeader().setResizingAllowed(false);
		JScrollPane scroolPanel = new JScrollPane(table);

		outputPanel.add(scroolPanel,BorderLayout.CENTER);
		c.add(outputPanel);
		c.add(inputPanel, BorderLayout.NORTH);
		
		this.setVisible(true);
	}

}
