package model;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Corrida {
	private static final DateTimeFormatter FORMATO = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
	private Map<Integer, Corredor> corredoresCorrendo = new HashMap<>();
	private List<Corredor> corredoresFinalizados = new ArrayList<Corredor>();
	private int proximoId = 1;
	
	private String nome;
	private String cidade;
	private String localDeInicio;
	private String percurso;
	private LocalDateTime data;
	private static long tempoInicio;
	
	public Corrida(String nome, String cidade, String localDeInicio, String percurso, String data) {
		this.nome = nome;
		this.cidade = cidade;
		this.localDeInicio = localDeInicio;
		this.percurso = percurso;
		this.data = LocalDateTime.parse(data,FORMATO);
	}

	
	
	public static DateTimeFormatter getFormato() {
		return FORMATO;
	}
	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getCidade() {
		return cidade;
	}

	public void setCidade(String cidade) {
		this.cidade = cidade;
	}

	public String getLocalDeInicio() {
		return localDeInicio;
	}

	public void setLocalDeInicio(String localDeInicio) {
		this.localDeInicio = localDeInicio;
	}

	public String getPercurso() {
		return percurso;
	}

	public void setPercurso(String percurso) {
		this.percurso = percurso;
	}
	
	public LocalDateTime getData() {
		return data;
	}

	public void setData(LocalDateTime data) {
		this.data = data;
	}

	public Corredor adicionarCorredor(String nome, String dataNascimento, String genero, String telefone) {
		Corredor corredor = new Corredor(proximoId, nome, dataNascimento, genero, telefone);
		corredoresCorrendo.put(proximoId, corredor);
		proximoId++;
		return corredor;
	}

	public Corredor obterCorredor(int id) {
		return corredoresCorrendo.get(id);
	}

	public void removerCorredor(int id) {
		corredoresCorrendo.remove(id);
	}

	public List<Corredor> listarCorredores() {
		return new ArrayList<Corredor>(corredoresCorrendo.values());
	}
	
	
	public static Long getTempoInicio() {
		return tempoInicio;
	}

	public static void iniciarCorrida() {
		tempoInicio = System.currentTimeMillis() / 1000;
	}
	public void terminarCorrida() {
	
	}
	
	public void completarCorrida(int id) {
		long tempoAtual = System.currentTimeMillis()/1000;
		if(corredoresCorrendo.get(id) != null) {
			corredoresCorrendo.get(id).finalizarCorrida(tempoAtual);
			corredoresFinalizados.add(corredoresCorrendo.get(id));
			corredoresCorrendo.remove(id);
			System.out.println("O corredor completou a corrida");
		}else {
			System.out.println("corredor nao existe");
		}
	}

	@Override
	public String toString() {
		return "Corrida [corredoresCorrendo=" + corredoresCorrendo + ", corredoresFinalizados=" + corredoresFinalizados
				+ ", proximoId=" + proximoId + ", nome=" + nome + ", cidade=" + cidade + ", localDeInicio="
				+ localDeInicio + ", percurso=" + percurso + ", data=" + data + "]";
	}

	
}
