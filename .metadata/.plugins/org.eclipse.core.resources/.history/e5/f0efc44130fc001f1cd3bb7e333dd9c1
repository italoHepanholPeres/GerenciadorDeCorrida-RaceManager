package model;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Corrida {
	private static final DateTimeFormatter FORMAT = DateTimeFormatter.ofPattern("dd/MM/uuuu HH:mm")
			.withResolverStyle(ResolverStyle.STRICT);
	private Map<Integer, Runner> runnersRunning = new HashMap<>();
	private List<Runner> runnersFinished = new ArrayList<Runner>();
	private int nextId = 1;
	
	private String name;
	private String city;
	private String startLocal;
	private String percurso;
	private LocalDateTime data;
	private static long tempoInicio;
	
	public Corrida(String name, String city, String startLocal, String percurso, String data) {
		this.name = name;
		this.city = city;
		this.startLocal = startLocal;
		this.percurso = percurso;
		this.data = LocalDateTime.parse(data,FORMAT);
		System.out.println(this.data);
	}

	
	
	public static DateTimeFormatter getFORMAT() {
		return FORMAT;
	}
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getStartLocal() {
		return startLocal;
	}

	public void setStartLocal(String startLocal) {
		this.startLocal = startLocal;
	}

	public String getPercurso() {
		return percurso;
	}

	public void setPercurso(String percurso) {
		this.percurso = percurso;
	}
	
	public LocalDateTime getData() {
		return data;
	}

	public void setData(LocalDateTime data) {
		this.data = data;
	}

	public Runner adicionarCorredor(String name, String dataNascimento, String genero, String telefone) {
		Runner corredor = new Runner(nextId, name, dataNascimento, genero, telefone);
		runnersRunning.put(nextId, corredor);
		nextId++;
		return corredor;
	}

	public Runner obterCorredor(int id) {
		return runnersRunning.get(id);
	}

	public void removerCorredor(int id) {
		runnersRunning.remove(id);
	}

	public List<Runner> listarCorredores() {
		return new ArrayList<Runner>(runnersRunning.values());
	}
	
	
	public static Long getTempoInicio() {
		return tempoInicio;
	}

	public static void iniciarCorrida() {
		tempoInicio = System.currentTimeMillis() / 1000;
	}
	public void terminarCorrida() {
	
	}
	
	public void completarCorrida(int id) {
		long tempoAtual = System.currentTimeMillis()/1000;
		if(runnersRunning.get(id) != null) {
			runnersRunning.get(id).finalizarCorrida(tempoAtual);
			runnersFinished.add(runnersRunning.get(id));
			runnersRunning.remove(id);
			System.out.println("O corredor completou a corrida");
		}else {
			System.out.println("corredor nao existe");
		}
	}

	@Override
	public String toString() {
		return "Corrida [corredoresCorrendo=" + runnersRunning + ", corredoresFinalizados=" + runnersFinished
				+ ", proximoId=" + nextId + ", nome=" + name + ", cidade=" + city + ", Local de in√≠cio="
				+ startLocal + ", percurso=" + percurso + ", data=" + data + "]";
	}

	
}
